package main

import (
	"encoding/xml"
	"fmt"
	"io/fs"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/katallaxie/pkg/logx"
	"github.com/spf13/pflag"
	"github.com/zeiss/pkg/filex"
)

type SVG struct {
	XMLName     xml.Name `xml:"svg"`
	Width       string   `xml:"width,attr"`
	Height      string   `xml:"height,attr"`
	ViewBox     string   `xml:"viewBox,attr"`
	Stroke      string   `xml:"stroke,attr"`
	StrokeWidth string   `xml:"stroke-width,attr"`
	AriaHidden  string   `xml:"aria-hidden,attr"`
	DataSlot    string   `xml:"data-slot,attr"`
	Fill        string   `xml:"fill,attr"`
	Paths       []Path   `xml:"path"`
}

type Path struct {
	D              string `xml:"d,attr"`
	StrokeLinecap  string `xml:"stroke-linecap,attr"`
	StrokeLinejoin string `xml:"stroke-linejoin,attr"`
}

const templ = `// Code generated by herogen; DO NOT EDIT.
package icons

import "github.com/your/htmx"

func {{.FuncName}}(p IconProps) htmx.Node {
    return htmx.SVG(
        htmx.Attribute("xmlns", "http://www.w3.org/2000/svg"),
        htmx.Attribute("viewBox", "{{.ViewBox}}"),
        {{- if .Stroke}}
        htmx.Attribute("stroke", "{{.Stroke}}"),
        {{- end}}
        {{- if .Fill}}
        htmx.Attribute("fill", "{{.Fill}}"),
        {{- end}}
        htmx.Merge(
            htmx.ClassNames{
                {{- range $key, $val := .DefaultClasses}}
                "{{$key}}": {{$val}},
                {{- end}}
            },
            p.ClassNames,
        ),
        {{- range .Paths}}
        htmx.Path(
            {{- if .StrokeLinecap}}
            htmx.Attribute("stroke-linecap", "{{.StrokeLinecap}}"),
            {{- end}}
            {{- if .StrokeLinejoin}}
            htmx.Attribute("stroke-linejoin", "{{.StrokeLinejoin}}"),
            {{- end}}
            htmx.Attribute("d", "{{.D}}"),
        ),
        {{- end}}
    )
}`

var defaultRoot = "heroicons/src"

var sizes = map[string]string{
	"sm": "16",
	"md": "24",
	"lg": "32",
}

var styles = []string{
	"solid",
	"outline",
}

var paths = []string{
	path.Join(sizes["sm"], "solid"),
	path.Join(sizes["md"], "solid"),
	path.Join(sizes["lg"], "solid"),
	path.Join(sizes["lg"], "outline"),
}

type flags struct {
	Root   string
	Output string
}

func ToCamelCase(filepath string) string {
	parts := strings.Split(filepath, "-")
	for i := range parts {
		if i > 0 && len(parts[i]) > 0 {
			parts[i] = strings.Title(parts[i])
		}
	}
	return strings.Join(parts, "")
}

func main() {
	log.SetFlags(0)
	log.SetOutput(os.Stderr)

	logx.RedirectStdLog(logx.LogSink)

	f := &flags{
		Root:   defaultRoot,
		Output: "demo",
	}

	pflag.StringVar(&f.Output, "output", f.Output, "output")
	pflag.StringVar(&f.Root, "root", f.Root, "root")
	pflag.Parse()

	fmt.Println("root:", f.Root)

	err := filepath.WalkDir(f.Root, func(path string, d fs.DirEntry, err error) error {
		fmt.Println("path:", path)
		if filepath.Ext(path) != ".svg" {
			return nil
		}

		return processSVG(path, f.Output)
	})

	if err != nil {
		fmt.Print(err)
		log.Fatal(err)
	}
}

func processSVG(inputPath, outputDir string) error {
	data, err := os.ReadFile(inputPath)
	if err != nil {
		return err
	}

	var svg SVG
	err = xml.Unmarshal(data, &svg)
	if err != nil {
		return err
	}

	variant := filepath.Base(filepath.Dir(inputPath)) // "solid" or "outline"
	baseName := strings.TrimSuffix(filepath.Base(inputPath), ".svg")
	funcName := fmt.Sprintf("%s%s", ToCamelCase(baseName), strings.Title(variant))
	outputFile := filepath.Join(outputDir, strings.ToLower(funcName)+".go")

	tmpl, err := template.New("component").Parse(templ)
	if err != nil {
		return err
	}

	err = filex.MkdirAll(outputDir, 0755)
	if err != nil {
		return err
	}

	output, err := os.Create(outputFile)
	if err != nil {
		return err
	}
	defer output.Close()

	err = tmpl.Execute(output, struct {
		FuncName       string
		Width          string
		Height         string
		ViewBox        string
		Paths          []Path
		Stroke         string
		Fill           string
		DefaultClasses map[string]bool
	}{
		FuncName: funcName,
		Width:    svg.Width,
		Height:   svg.Height,
		ViewBox:  svg.ViewBox,
		Paths:    svg.Paths,
		DefaultClasses: map[string]bool{
			"w-6": variant == "solid",
			"h-6": variant == "solid",
			"w-5": variant == "outline",
			"h-5": variant == "outline",
		},
	})
	if err != nil {
		return err
	}

	return nil
}
